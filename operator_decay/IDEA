Any function that wants to return a smart reference might want to modify how
deduction works and decay to its value type. This is important to avoid passing
references where the syntax doesn't clearly state such an intent. Storing a
reference without syntactic clues leads to non-obvious memory safety issues
(dangling references) and should therefore be avoided. However, with current
C++ a reference type that is not an lvalue reference does not "decay" to pass
by value. Such a facility is simply missing in the language.

Consider:

decay_t<int &> -> int
decay_t<vector<int>::reference> -> int
decay_t<vector<bool>::reference> -> vector<bool>::reference (should be bool!)

The last expression isn't bool because there's no way to express that intent in
C++. Otherwise, I'm sure vector<bool>::reference would decay to bool. This
proposal wants to make it possible (though changing existing reference classes
like vector<bool>::reference would be a breaking change, so that's not
proposed; this is also a reason to fix this issue ASAP --- we don't want to
exacerbate the problem).

-------------------------------------------------------------

#include <vector>

void g(bool);
void g(int);
void g(int*);
void g(auto&&) = delete;

int data[10] = {};
void f()
{
  g(data); // decays to int*
}

void f(std::vector<int> d)
{
  auto x = d[0]; // x is deduced as value_type
  g(x); // calls g(int)
  auto& y = d[0];
  y = 1;
}

void f(std::vector<bool> d)
{
  auto x = d[0]; // x is deduced as reference and NOT value_type

  g(x); // calls g<std::vector<bool>::reference>(auto&&). should call g(bool), therefore should decay to bool above; like data decays to int*

  auto& y = d[0]; // right, this doesn't and shouldn't work

  d[0] = true; // but this works

  std::vector<bool>::reference ref = d[0];

  ref = false; // and this works even if reference would decay on deduction
}

-------------------------------------------------------------

using __vf4 [[__gnu__::__vector_size__(16)]] = float;

class simd_reference
{
  __vf4& ref; // ref[i] is not a float lvalue reference
  size_t i;

public:
  operator float() const
  { return ref[i]; }

  simd_reference operator=(float x) &&
  {
    ref[i] = x;
    return simd_reference{ref, i};
  }
};

class simd
{
  __vf4 d;

public:
  float operator[](size_t i) const
  { return d[i]; }

  simd_reference operator[](size_t i)
  { return simd_reference{d, i}; }
};

void f(simd x)
{
  auto ref = x[0]; // decltype(ref) should be float like when x is std::vector<float>
  ...
}

-------------------------------------------------------------

Proposal
========

class A { /*...*/ };

Options:

A)

class Reference
{
  A operator decay();
  ...

B)

class Reference decays_to A
{
  ...

C)

class Reference
{
  constexpr operator A() const decay;
  ...

D)

template<>
struct ::std::decay<Reference>
{
  using type = A;
};


//  Result
// ========

Reference f();
static_assert(std::is_same_v<A, std::decay_t<Reference>>);
auto x = f(); // decltype(x) is A
Reference ref1 = f(); // well-formed
decltype(auto) ref2 = f(); // type is Reference
const auto& ref3 = f(); // const Reference&
auto&& ref4 = f(); // Reference&&

Foo bar;
bar + f(); // lookup of operator+ (as always + associated type A),
           // overload resolution lets Reference decay to A (unless exact match with Reference and
           // its value category)

-------------------------------------------------------------

Generalization?
=================

Maybe a more general mechanism to look into is when an rvalue is assigned to an
lvalue? IOW, what if a type had the ability to modify what happens on
rvalue to lvalue assignment? Given an object `v` of type `vector<bool>`, the
statement

  const auto& ref = v[0];

deduces `vector<bool>::reference`. What if it deduced `bool` instead? Then the
`vector<bool>::reference` temporary converts to a `bool` temporary, which gets
lifetime extended by the const reference. However, the following would fail for
`vector<bool> v` and would not fail for `vector<int> v`:

  v[0] = false;
  const auto& ref = v[0];
  v[0] = true;
  assert(ref == v[0]);

The alternative here could be to make rvalue-to-lvalue ill-formed. This should
imply decay to an implicit conversion operator on deduction. Then, given
`vector<bool> v`:

  v[0] = false; // OK
  auto x = v[0]; // OK: deduces bool
  vector<bool>::reference ref1 = v[0]; // ill-formed
  decltype(auto) ref2 = v[0]; // ill-formed
  const auto& ref3 = v[0]; // ill-formed
  auto&& ref4 = v[0]; // OK: deduces bool rvalue?

This doesn't seem like an improvement.


Back to the drawing board
===========================

What I want from a simd::operator[]:

v[i] is either a prvalue of the element type or used as LHS for assigning a new
value. Thus, unless the subscript operator expression is the LHS of a (compound)
assignment operator, use the const (prvalue-returning) subscript operator. This
effect could be achieved if non-const simd::operator[] were constrained on
being followed by a (compound) assignment operator. Mock:

template <typename T>
  class simd
  {
  public:
    T operator[](int i) const { ... }
    reference<T> operator[](int i) requires "returned object is LHS of (compound) assignment" { ... }
  };


This seems too ambitious of a feature...

However, the same effect could be achieved if simd<T>::reference immediately
decays into a prvalue of type T, unless it is used as LHS of a (compound)
assignment expression. Mock type:

class reference
{
  simd<float>& v;
  int i;

public:
  operator=(float x) && { v.__assign(i, x); }
  operator+=(float x) && { v.__compound_assign_plus(i, x); }
  operator-=(float x) && { v.__compound_assign_minus(i, x); }
  // ... for all compound assignment operators ...

  float operator before_you_do_anything_else() { return v.__get(i); }
};

Then:

simd<float> v;
auto x = v[0]; // decltype(x) is float
reference ref1 = v[0]; // ill-formed
decltype(auto) ref2 = v[0]; // ill-formed
const auto& ref3 = v[0]; // v[0] is prvalue of type float => deduces float / const float&
auto&& ref4 = v[0]; // v[0] is prvalue of type float => deduces float / float&&
auto& ref5 = v[0]; // v[0] is prvalue of type float => ill-formed

What is decltype(v[0]), though? simd<float>::reference or float? I believe it
must be the former, because assignment does something different than if it were
a float.
